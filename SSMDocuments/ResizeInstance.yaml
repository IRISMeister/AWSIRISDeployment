description: Resize an EC2 instance
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  InstanceId:
    type: String
    description: (Required) The Id of the instance
  InstanceType: 
    type: String
    AllowedValues: 
      - m5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.16xlarge
    description: (Required) The desired instance type
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ""
mainSteps:
  # - name: assertInstanceType
  #   action: aws:assertAwsResourceProperty
  #   inputs: 
  #     Service: EC2 
  #     Api: DescribeInstances
  #     InstanceIds:
  #       - "{{InstanceId}}"
  #     PropertySelector: "$.Reservations[0].Instances[0].InstanceType"
  #     DesiredValues: ["{{InstanceType}}"]
  #   onFailure: step:stopInstance
  #   isCritical: false
  #   isEnd: true 

  - name: adjustIrisSettings
    action: 'aws:runCommand'
    inputs:
      Comment: SettingGlobalBuffers
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{InstanceId}}'
      Parameters:
        commands:
          - sudo iris session iris -U\%SYS "##class(SE.ShardInstaller).SetConfig(4000)"
  - name: stopInstance
    action: aws:changeInstanceState
    inputs: 
      InstanceIds: 
        - "{{InstanceId}}"
      DesiredState: stopped 
  - name: resizeInstance 
    action: aws:executeAwsApi
    inputs:
      Service: EC2 
      Api: ModifyInstanceAttribute
      InstanceId: "{{InstanceId}}"
      InstanceType: 
        Value: "{{InstanceType}}"
  - name: wait
    action: aws:sleep
    inputs:
      Duration: "PT5S"

  - name: startInstance
    action: aws:changeInstanceState 
    inputs:
      InstanceIds:
        - "{{InstanceId}}"
      DesiredState: running 

---
schemaVersion: '0.3'
description: Create EBS volume snapshot
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  VolumeId:
    type: String
    description: "(Required) The ID of the volume."
  Description:
    type: String
    description: "(Optional) A description for the snapshot"
    default: ''
  AutomationAssumeRole:
    type: String
    description: "(Optional) The ARN of the role that allows Automation to perform
      the actions on your behalf. "
    default: ''
mainSteps:
- name: freezeWD
    action: 'aws:runCommand'
    inputs:
      Comment: Freezing IRIS Write Daemon
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{InstanceId}}'
      Parameters:
        commands:
          - sudo iris session IRIS -U%SYS "##Class(Backup.General).ExternalFreeze()"
          - status=$?
          - if [ $status -eq 5 ]; then
          - echo "SYSTEM IS FROZEN"
          - elif [ $status -eq 3 ]; then
          - echo "SYSTEM FREEZE FAILED"
          - fi
- name: createSnapshot
  action: aws:executeAwsApi
  inputs:
    Service: ec2
    Api: CreateSnapshot
    VolumeId: "{{ VolumeId }}"
    Description: "{{ Description }}"
  outputs:
  - Name: Payload
    Selector: SnapshotId
    Type: String
- name: thawWD
    action: 'aws:runCommand'
    inputs:
      Comment: Unfreezing IRIS Write Daemon
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{InstanceId}}'
      Parameters:
        commands:
          - sudo iris session IRIS -U%SYS "##Class(Backup.General).ExternalThaw()"
- name: verifySnapshot
  action: aws:waitForAwsResourceProperty
  inputs:
    Service: ec2
    Api: DescribeSnapshots
    SnapshotIds: ["{{createSnapshot.Payload}}"]
    PropertySelector: Snapshots[0].State
    DesiredValues:
    - completed
outputs:
- createSnapshot.Payload
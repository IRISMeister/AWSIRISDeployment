---
AWSTemplateFormatVersion: 2010-09-09
Metadata:
    Author: Anton Umnikov
    Last Updated: August 12, 2020
    Description: IRIS Arbiter Node

Parameters:
  VpcIdParameter:
    Description: Launch EC2 instances in this VPC
    Type: AWS::EC2::VPC::Id
  InstanceSubnetIdParameter:
    Description: Launch EC2 instances in this subnet
    Type: AWS::EC2::Subnet::Id
  RemoteAccessCIDRParameter:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Restrict to <your-own-ip>/32 for better security
    Default: 0.0.0.0/0
    Type: String
  SshKeyParameter:
    Description: SSH Keypair to login to the instance
    Default: anton-isc
    Type: AWS::EC2::KeyPair::KeyName
  IamInstanceProfileParameter:
    Description: IAM instance role for EC2 instances 
    Default: S3FullAccessForEC2
    Type: String
  S3BucketNameParameter:
    Description: S3 Bucket with IRIS binaries
    Type: String
    Default: asia-pac-training-2019
  InstanceTypeParameter:
    Description: Cluster node instance type
    Type: String
    Default: t3.small
    AllowedValues: 
      - t3.small
      - t3.large
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  MirrorInstanceRole:
    Description: Cluster node instance role
    Type: String
    Default: ARBITER
    AllowedValues: 
      - NONE
      - PRIMARY
      - FAILOVER
      - ASYNC
      - ARBITER      

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow selected CIDR block to access port 22
      GroupName: !Sub "${AWS::StackName}-Arbiter-SG"
      VpcId: !Ref VpcIdParameter
  SecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref RemoteAccessCIDRParameter
  SecurityGroupIngressIRISAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 2188
      ToPort: 2188
      CidrIp: !Ref RemoteAccessCIDRParameter
  ##Node Start##         
  NodeInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags: 
        - 
          Key: Name
          Value: !Sub "${AWS::StackName}-IRIS"
      ImageId: !Ref LatestAmiId
        #Fn::FindInMap:
        #- RegionMap
        #- Ref: AWS::Region
        #- AMIx64
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref SshKeyParameter
      IamInstanceProfile: !Ref IamInstanceProfileParameter
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref InstanceSubnetIdParameter
      UserData:
        Fn::Base64:
         Fn::Sub:
         - |
           #!/usr/bin/env bash
           DISTR=ISCAgent-2020.1.0.215.0-lnxrhx64
           BUCKET=${ConfigS3BucketName}
           INSTANCEROLE=${MirrorInstanceRole}
           set -o errexit
           yum update -y
           mkdir /tmp/irisdistr
           cd /tmp/irisdistr
           aws s3 cp s3://$BUCKET/$DISTR.tar.gz .
           tar -xvf $DISTR.tar.gz
           cd $DISTR
           ./agentinstall << END
           1
           yes
           END
           cd ..
           sudo systemctl daemon-reload
           sudo systemctl enable ISCAgent.service
           sudo systemctl start ISCAgent.service
         - {
           ConfigS3BucketName: !Ref S3BucketNameParameter,
           MirrorInstanceRole: !Ref MirrorInstanceRole
           }
  ##Node End##          

Outputs:
  #NodePublicIP:
  #  Description: Node PublicIP
  #  Value: !Join
  #    - ''
  #    - ['', !GetAtt NodeInstance.PublicIp, '']
  NodePrivateIP:
    Description: Node PrivateIP
    Value: !Join
      - ''
      - ['', !GetAtt NodeInstance.PrivateIp, '']
 
---
AWSTemplateFormatVersion: 2010-09-09
Metadata:
  Author: Anton Umnikov
  Last Updated: August 12, 2020
  Description: IRIS Mirror Cluster
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "IRIS Configuration"
        Parameters: 
          - IRISPasswordParameter
          - S3BucketNameParameter
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcIdParameter
          - BastionSubnetIdParameter
          - InstanceSubnetIdParameter
          - RemoteAccessCIDRParameter
      - 
        Label: 
          default: "EC2 Instance Configuration"
        Parameters: 
          - InstanceTypeParameter
          - SshKeyParameter
          - IamInstanceProfileParameter
          - LatestAmiIdForIRISParameter

    ParameterLabels: 
      VpcIdParameter: 
        default: "Which VPC should this be deployed to?"
      InstanceSubnetIdParameter: 
        default: "Subnets to deploy IRIS (private subnet recommended)"
      BastionSubnetIdParameter: 
        default: "Subnets to deploy Bastion host (public)"
      RemoteAccessCIDRParameter:
        default: "Allowed CIDR block for external access to the instances"
      InstanceTypeParameter:
        default: "EC2 instance type for IRIS nodes"
      SshKeyParameter:
        default: "SSH Key Pair name to connect to EC2 instances"
      IamInstanceProfileParameter:
        default: "IAM Role for EC2 instances"
      IRISPasswordParameter:
        default: "Password for SuperUser/_SYSTEM user"
      S3BucketNameParameter:
        default: "S3 bucket with IRIS binaries"
      LatestAmiIdForIRISParameter:
        default: "Which language version of Windows should be deployed to?"



Parameters:
  VpcIdParameter:
    Description: Launch EC2 instances in this VPC
    Type: AWS::EC2::VPC::Id
  BastionSubnetIdParameter:
    Description: 2 subnets in two different Availability Zones. Public Subnets. 
    Type: 'List<AWS::EC2::Subnet::Id>'
  InstanceSubnetIdParameter:
    Description: 3 subnets in three different Availability Zones. Last subnet is for arbiter.
    Type: 'List<AWS::EC2::Subnet::Id>'
  SshKeyParameter:
    Description: SSH Keypair to login to the instance
    Type: AWS::EC2::KeyPair::KeyName
  RemoteAccessCIDRParameter:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Restrict to <your-own-ip>/32 for better security
    Default: 0.0.0.0/0
    Type: String
  IamInstanceProfileParameter:
    Description: IAM instance role for EC2 instances 
    Type: String
  IRISPasswordParameter:
    Description: Admin Password for IRIS (at least 4 alphanumeric characters)
    Type: String
    NoEcho: true
    MinLength: 4
    MaxLength: 32
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  S3BucketNameParameter:
    Description: S3 Bucket with IRIS binaries
    Type: String
  InstanceTypeParameter:
    Description: Cluster node instance type
    Type: String
    Default: m5.large
    AllowedValues: 
      - m5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.16xlarge
  LatestAmiIdForIRISParameter:
    #Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    # Changed to String type to allow multiple values
    Description: Public Systems Manager Parameter
    Type: String
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-Japanese-Full-Base
    AllowedValues: 
      - /aws/service/ami-windows-latest/Windows_Server-2019-Japanese-Full-Base
      - /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all hosts in this VPC to access SSH and IRIS ports
      GroupName: !Sub "${AWS::StackName}-IRIS-SG"
      VpcId: !Ref VpcIdParameter
  SecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  SecurityGroupIngressRDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 3389
      ToPort: 3389
      CidrIp: '0.0.0.0/0'
  SecurityGroupIngressIRISSuperServer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 51773
      ToPort: 51773
      CidrIp: '0.0.0.0/0'
  SecurityGroupIngressIRISWeb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 52773
      ToPort: 52773
      CidrIp: '0.0.0.0/0'
  SecurityGroupIngressIRISAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 2188
      ToPort: 2188
      CidrIp: '0.0.0.0/0'
  Node01:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        #VpcIdParameter: !Ref VpcIdParameter
        InstanceSubnetIdParameter: !Select [0,!Ref InstanceSubnetIdParameter]
        InstanceSecurityGroupParameter: !Ref InstanceSecurityGroup
        SshKeyParameter: !Ref SshKeyParameter
        IamInstanceProfileParameter: !Ref IamInstanceProfileParameter
        IRISPasswordParameter: !Ref IRISPasswordParameter
        S3BucketNameParameter: !Ref S3BucketNameParameter
        InstanceTypeParameter: !Ref InstanceTypeParameter
        LatestAmiIdParameter: !Ref LatestAmiIdForIRISParameter
        MirrorInstanceRole: PRIMARY
        MirrorArbiterIP: !GetAtt 'Arbiter.Outputs.NodePrivateIP'
      TemplateURL: https://my-cf-templates.s3-ap-northeast-1.amazonaws.com/MirrorNode_Windows.yaml
      #TimeoutInMinutes: '5'
  Node02:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        #VpcIdParameter: !Ref VpcIdParameter
        InstanceSubnetIdParameter: !Select [1,!Ref InstanceSubnetIdParameter]
        InstanceSecurityGroupParameter: !Ref InstanceSecurityGroup
        SshKeyParameter: !Ref SshKeyParameter
        IamInstanceProfileParameter: !Ref IamInstanceProfileParameter
        IRISPasswordParameter: !Ref IRISPasswordParameter
        S3BucketNameParameter: !Ref S3BucketNameParameter
        InstanceTypeParameter: !Ref InstanceTypeParameter
        LatestAmiIdParameter: !Ref LatestAmiIdForIRISParameter
        MirrorInstanceRole: FAILOVER
        MirrorPrimaryIP: !GetAtt 'Node01.Outputs.NodePrivateIP'
      TemplateURL: https://my-cf-templates.s3-ap-northeast-1.amazonaws.com/MirrorNode_Windows.yaml
      #TimeoutInMinutes: '5'
  Arbiter:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcIdParameter: !Ref VpcIdParameter
        InstanceSubnetIdParameter: !Select [2,!Ref InstanceSubnetIdParameter]
        #InstanceSecurityGroupParameter: !Ref InstanceSecurityGroup
        SshKeyParameter: !Ref SshKeyParameter
        IamInstanceProfileParameter: !Ref IamInstanceProfileParameter
        S3BucketNameParameter: !Ref S3BucketNameParameter
        InstanceTypeParameter: t3.small
        MirrorInstanceRole: ARBITER
      TemplateURL: https://my-cf-templates.s3-ap-northeast-1.amazonaws.com/ArbiterNode.yaml
      #TimeoutInMinutes: '5'
  Bastion:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcIdParameter: !Ref VpcIdParameter
        InstanceSubnetIdParameter: !Select [0,!Ref BastionSubnetIdParameter]
        #InstanceSecurityGroupParameter: !Ref InstanceSecurityGroup
        RemoteAccessCIDRParameter: !Ref RemoteAccessCIDRParameter
        SshKeyParameter: !Ref SshKeyParameter
      TemplateURL: https://my-cf-templates.s3-ap-northeast-1.amazonaws.com/BastionNode.yaml
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Type: network
      Name: !Sub "${AWS::StackName}-NLB"
      Scheme: internet-facing
      Subnets:
        - !Select [0,!Ref BastionSubnetIdParameter]
        - !Select [1,!Ref BastionSubnetIdParameter]
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 51773
      Protocol: TCP
  LBListener52773:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup52773
      LoadBalancerArn: !Ref LoadBalancer
      Port: 52773
      Protocol: TCP
  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /csp/mirror_status.cxw
      HealthCheckPort: '52773'
      HealthCheckProtocol: HTTP
      #HealthCheckTimeoutSeconds: 10
      #HealthCheckIntervalSeconds: 10
      #UnhealthyThresholdCount: 3
      VpcId: !Ref VpcIdParameter
      Name: !Sub "${AWS::StackName}-TargetGroup"
      Port: 51773
      Protocol: TCP
      TargetType: ip
      Targets:
        - Id: !GetAtt 'Node01.Outputs.NodePrivateIP'
        - Id: !GetAtt 'Node02.Outputs.NodePrivateIP'
  LBTargetGroup52773:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /csp/mirror_status.cxw
      HealthCheckPort: '52773'
      HealthCheckProtocol: HTTP
      #HealthCheckTimeoutSeconds: 10
      #HealthCheckIntervalSeconds: 10
      #UnhealthyThresholdCount: 3
      VpcId: !Ref VpcIdParameter
      Name: !Sub "${AWS::StackName}-TargetGroup52773"
      Port: 52773
      Protocol: TCP
      TargetType: ip
      Targets:
        - Id: !GetAtt 'Node01.Outputs.NodePrivateIP'
        - Id: !GetAtt 'Node02.Outputs.NodePrivateIP'
  InternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Type: network
      Name: !Sub "${AWS::StackName}-Internal-NLB"
      Scheme: internal
      Subnets:
        - !Select [0,!Ref InstanceSubnetIdParameter]
        - !Select [1,!Ref InstanceSubnetIdParameter]
  IntLBListener52773:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref IntTargetGroup52773
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 52773
      Protocol: TCP
  IntTargetGroup52773:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /csp/mirror_status.cxw
      HealthCheckPort: '52773'
      HealthCheckProtocol: HTTP
      #HealthCheckTimeoutSeconds: 10
      #HealthCheckIntervalSeconds: 10
      #UnhealthyThresholdCount: 3
      VpcId: !Ref VpcIdParameter
      Name: !Sub "${AWS::StackName}-Int-TargetGroup52773"
      Port: 52773
      Protocol: TCP
      TargetType: ip
      Targets:
        - Id: !GetAtt 'Node01.Outputs.NodePrivateIP'
        - Id: !GetAtt 'Node02.Outputs.NodePrivateIP'
Outputs:
  JDBCEndpoint:
    Description: JDBC Connection String
    Value: !Join
      - ''
      - ['jdbc:IRIS://', !GetAtt 'LoadBalancer.DNSName', ':51773/DATA']
  HTTPEndpoint:
    Description: SMP Endpoint as an example for HTTP access
    Value: !Join
      - ''
      - ['http://', !GetAtt 'LoadBalancer.DNSName', ':52773/csp/sys/%25CSP.Portal.Home.zen']
  IntHTTPEndpoint:
    Description: Endpoint for internal HTTP access
    Value: !Join
      - ''
      - ['http://', !GetAtt 'InternalLoadBalancer.DNSName', ':52773/csp/sys/%25CSP.Portal.Home.zen']
  Node01PrivateIP:
    Description: Node 01 Private IP
    Value: !Join
      - ''
      - ['', !GetAtt Node01.Outputs.NodePrivateIP, '']

  Node02PrivateIP:
    Description: Node 02 Private IP
    Value: !Join
      - ''
      - ['', !GetAtt Node02.Outputs.NodePrivateIP, '']

  Node01ViaBastion:
    Description: Node 01 Connection via Bastion
    Value: !Join
      - ''
      - ['ssh -J ec2-user@', !GetAtt Bastion.Outputs.NodePublicIP, ' ec2-user@', !GetAtt Node01.Outputs.NodePrivateIP,' -L 52773:', !GetAtt Node01.Outputs.NodePrivateIP,':52773']
    
  Node02ViaBastion:
    Description: Node 02 Connection via Bastion
    Value: !Join
      - ''
      - ['ssh -J ec2-user@', !GetAtt Bastion.Outputs.NodePublicIP, ' ec2-user@', !GetAtt Node02.Outputs.NodePrivateIP,' -L 52773:', !GetAtt Node02.Outputs.NodePrivateIP,':52773']

  Node01ViaBastionAlt:
    Description: Node 01 Connection via Bastion, Alternative way. 
    Value: !Join
      - ''
      - ['ssh -i .ssh\',!Ref SshKeyParameter, '.pem -L 52773:', !GetAtt Node01.Outputs.NodePrivateIP,':52773', ' ec2-user@', !GetAtt Bastion.Outputs.NodePublicIP]

  Node02ViaBastionAlt:
    Description: Node 02 Connection via Bastion, Alternative way. 
    Value: !Join
      - ''
      - ['ssh -i .ssh\',!Ref SshKeyParameter, '.pem -L 52773:', !GetAtt Node02.Outputs.NodePrivateIP,':52773', ' ec2-user@', !GetAtt Bastion.Outputs.NodePublicIP]

  BastionPublicIP:
    Description: Basion Host public IP
    Value: !Join
      - ''
      - ['', !GetAtt Bastion.Outputs.NodePublicIP, '']
